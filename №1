class Polynomial:
    def __init__(self, coefficients: List[Fraction]):
        """Инициализирует многочлен по списку коэффициентов."""
      
        while coefficients and coefficients[0] == 0:
            coefficients.pop(0)
        self.coefficients = coefficients if coefficients else [0] #Обработка пустого списка


    def __repr__(self):
        """Представление многочлена в виде строки."""
        terms = []
        for i, coeff in enumerate(self.coefficients):
            if coeff == 0:
                continue
            term = str(coeff)
            if i > 0:
                term += "x"
                if i > 1:
                    term += f"^{i}"
            terms.append(term)
        return " + ".join(terms) or "0"


    def __add__(self, other: "Polynomial") -> "Polynomial":
        """Сложение двух многочленов."""
        max_len = max(len(self.coefficients), len(other.coefficients))
        padded_self = self.coefficients + [0] * (max_len - len(self.coefficients))
        padded_other = other.coefficients + [0] * (max_len - len(other.coefficients))
        return Polynomial([a + b for a, b in zip(padded_self, padded_other)])

    def __sub__(self, other: "Polynomial") -> "Polynomial":
        """Вычитание двух многочленов."""
        max_len = max(len(self.coefficients), len(other.coefficients))
        padded_self = self.coefficients + [0] * (max_len - len(self.coefficients))
        padded_other = other.coefficients + [0] * (max_len - len(other.coefficients))
        return Polynomial([a - b for a, b in zip(padded_self, padded_other)])


    def evaluate(self, x: float) -> float:
        """Вычисляет значение многочлена в точке x."""
        result = 0
        for i, coeff in enumerate(self.coefficients):
            result += coeff * (x**i)
        return result

    def derivative(self) -> "Polynomial":
        """Вычисляет производную многочлена."""
        if not self.coefficients:
            return Polynomial([0])
        derived_coeffs = [i * c for i, c in enumerate(self.coefficients[1:])]
        return Polynomial(derived_coeffs)

    def write_to_file(self, filename: str):
        """Записывает многочлен в файл."""
        with open(filename, "w") as f:
            f.write(str(self))

    def find_integer_roots(self) -> List[int]:
        """Находит целые корни многочлена (если коэффициенты - дроби)."""
        if not all(isinstance(c, Fraction) for c in self.coefficients):
            raise ValueError("Коэффициенты должны быть дробями для поиска целых корней.")

        roots = []
        for i in range(-10, 11): 
          if self.evaluate(i) == 0:
            roots.append(i)
        return roots

def polynomial_gcd(p1: Polynomial, p2: Polynomial) -> Polynomial:
    """Находит наибольший общий делитель двух многочленов (алгоритм Евклида)."""
    while p2.coefficients != [0]:
        p1, p2 = p2, p1 % p2 # Используем оператор % для многочленов 
    return p1

def polynomial_mod(p1: Polynomial, p2: Polynomial) -> Polynomial:
    """Модульное деление многочленов (остаток от деления)."""
    if not p2.coefficients or p2.coefficients == [0]:
      raise ZeroDivisionError("Деление на ноль")

    if len(p1.coefficients) < len(p2.coefficients):
        return p1

    divisor_degree = len(p2.coefficients) -1
    dividend_degree = len(p1.coefficients) -1

    quotient = [0]*(dividend_degree - divisor_degree +1)

    remainder = list(p1.coefficients)

    for i in range(dividend_degree, divisor_degree-1, -1):
        quotient_coeff = remainder[i]/p2.coefficients[-1]
        quotient[i-divisor_degree] = quotient_coeff

        for j in range(len(p2.coefficients)):
            remainder[i-j] -= quotient_coeff * p2.coefficients[len(p2.coefficients)-1-j]

    return Polynomial(remainder[:divisor_degree])
    


Polynomial.__mod__ = polynomial_mod


def input_coefficients() -> List[Fraction]:
    """Ввод коэффициентов многочлена от пользователя."""
    while True:
        try:
            coeffs_str = input("Введите коэффициенты через пробел (например, 1/2 -1 1): ")
            coeffs = [Fraction(c) for c in coeffs_str.split()]
            return coeffs
        except ValueError:
            print("Неверный формат ввода. Пожалуйста, используйте дроби через пробел.")


if __name__ == "__main__":
    print("Ввод первого многочлена:")
    coeffs1 = input_coefficients()
    p1 = Polynomial(coeffs1)

    print("\nВвод второго многочлена:")
    coeffs2 = input_coefficients()
    p2 = Polynomial(coeffs2)

    print("\np1:", p1)
    print("p2:", p2)

    print("\np1 + p2:", p1 + p2)

    x_val = float(input("\nВведите значение x для вычисления p1(x): "))
    print(f"p1({x_val}) = {p1.evaluate(x_val)}")

    print("\nПроизводная p1:", p1.derivative())

    p1.write_to_file("polynomial1.txt")
    print("\nМногочлен p1 записан в файл polynomial1.txt")

    try:
        integer_roots = p1.find_integer_roots()
        print("\nЦелые корни p1:", integer_roots)
    except ValueError as e:
        print(e)

    try:
        gcd_poly = polynomial_gcd(p1, p2)
        print("\nНаибольший общий делитель p1 и p2:", gcd_poly)
    except ZeroDivisionError as e:
      print(f"Ошибка: {e}")
