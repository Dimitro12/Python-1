class Line:
    def __init__(self, x1, y1, x2, y2, line_number):
        self.x1 = x1
        self.y1 = y1
        self.x2 = x2
        self.y2 = y2
        self.line_number = line_number

        if x1 == x2:  
            self.is_vertical = True
            self.slope = float('inf')
            self.intercept = x1
        else:
            self.is_vertical = False
            self.slope = (y2 - y1) / (x2 - x1)
            self.intercept = y1 - self.slope * x1

    def intersection(self, other_line):
        if self.is_vertical and other_line.is_vertical:
            return None  

        if self.is_vertical:
            x = self.intercept
            y = other_line.slope * x + other_line.intercept
            return x,y
        elif other_line.is_vertical:
            x = other_line.intercept
            y = self.slope * x + self.intercept
            return x,y
        else:
            if self.slope == other_line.slope:
                return None 
            x = (other_line.intercept - self.intercept) / (self.slope - other_line.slope)
            y = self.slope * x + self.intercept
            return x, y

    def __str__(self):
      return f"Line {self.line_number}: ({self.x1}, {self.y1}) - ({self.x2}, {self.y2})"


class Solution:
    def __init__(self, filename):
        self.lines = self.read_lines_from_file(filename)

    def read_lines_from_file(self, filename):
        try:
            with open(filename, 'r') as f:
                lines = []
                for i, line in enumerate(f):
                    try:
                        x1, y1, x2, y2, num = map(float, line.strip().split())
                        lines.append(Line(x1,y1,x2,y2, int(num)))
                    except ValueError:
                        print(f"Error parsing line {i+1} in {filename}")
                return lines

        except FileNotFoundError:
            print(f"Error: File '{filename}' not found.")
            return []

    def calculate_area_ratio(self):
      ratios = {}
      for line in self.lines:
        ratios[line.line_number] = (line.x1 + line.x2)/2
      return ratios

    def find_intersections(self):
        intersections = {}
        for i, line1 in enumerate(self.lines):
            for j, line2 in enumerate(self.lines):
                if i < j:  
                    point = line1.intersection(line2)
                    if point:
                        if 0 <= point[0] <= 1 and 0 <= point[1] <= 1:
                            intersections[(line1.line_number, line2.line_number)] = point
        return intersections

    def find_triple_intersections(self):
        intersections = self.find_intersections()
        triple_intersections = {}
        for point in intersections.values():
            count = 0
            for key, value in intersections.items():
              if value == point:
                count +=1
            if count >=3:
              lines_involved = [k for k, v in intersections.items() if v == point]
              triple_intersections[tuple(point)] = lines_involved

        if triple_intersections:
            return triple_intersections
        else:
            print("Точек пересечения минимум трёх отрезков не найдено.")
            return {}


solution = Solution("number5.txt")  

area_ratios = solution.calculate_area_ratio()
print("Соотношения площадей:", area_ratios)

all_intersections = solution.find_intersections()
print("Все точки пересечения:", all_intersections)

triple_intersections = solution.find_triple_intersections()
print("Точки пересечения минимум трёх отрезков:", triple_intersections)
